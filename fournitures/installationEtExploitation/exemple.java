package com.mxgraph.examples.swing;

import javax.swing.JFrame;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import eltGraphique.*;
import util.*;

public class Exemple extends JFrame {
	private JPanel panneau;

	public HelloWorld() {
		super("Hello, World!");
		super.add(panneau);
		mxGraph graph = new mxGraph(); // On commence par créer un graphe ou apparaîtrons les éléments

		/* on ajoute ca à la fenetre */
		mxGraphComponent graphComponent = new mxGraphcomponent(graph);
		graphComponent.setPrefferedSize(500,500);
		panneau.add(graphComponent);
		Diagramme diagramme = new Diagramme();

		/* on instancie différents éléments de modélisation */
		ElementGraphique maClasse1 = new Classe(graph, diagramme, "test 1", new Position(42,42);
		ElementGraphique maClasse2 = new Classe(graph, diagramme, "test 2", new Position(13,37);
		Acteur monActeur = new ActeurActif(graph, diagramme, "test 3", new Position(13,37);

		/* L'appel à la super méthode créer aura pour effet d'afficher nos éléments de modélisation sur le graphe */
		maClasse1.creer();
		maClasse2.creer();
		monActeur.creer();

		/* on instancie des liens en mettant en paramètre la source et la destination du lien */	
		Lien monLien1 = new lien(maClasse1, maClasse2, graph, diagramme, TypeLien.ASSOCIATION);
		Lien monLien2 = new lien(monActeur, maClasse1, graph, diagramme, TypeLien.SPECIALISATION);

		/* de la même manière, on peut ensuite créer le lien pour l'afficher */
		monLien1.creer();
		monLien2.creer();

		/* Finalement, on ne voulait pas de l'acteur, alors on le supprimer, automatiquement la flèche pointant sur Acteur sera supprimée*/
		monActeur.supprimer();
		monActeur = null; //on met l'acteur à null pour ne pas perdre de mémoire
	}

	public static void main(String[] args)
	{
		Exemple fenetre = new Exemple();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(400, 320);
		frame.setVisible(true);
	}
}
